{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","document","getElementById","innerHTML"],"mappings":"qIAAe,I,UCwBAA,ICZAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCMdQ,SAASC,eAAe,QAAQC,UAAhC,8/EAqEAX,K","file":"static/js/main.3df43b45.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\ndocument.getElementById('root').innerHTML=`<video id='video'></video>\n<canvas id='result'></canvas>\n<script>\n    let inited = false\n    let init = (async () => {\n\n        if (inited) {\n            return;\n        }\n        inited = true;\n        let textElement = document.getElementById('but')\n        textElement.innerHTML = 'started'\n        console.log(tf)\n        //await tf.setBackend('cpu')\n        let model = await tf.loadLayersModel('/model/model.json');\n        model.inputs[0].shape = [null,null,null,3]\n        model.inputLayers[0].batchInputShape = [null,null,null,3]\n        model.inputLayers[0].inputSpec[0].shape = [null,null,null,3]\n        model.feedInputShapes[0] = [null,null,null,3]\n        model.internalInputShapes[0] = [null,null,null,3]\n        console.log('model: ', model);\n        textElement.innerHTML = 'loaded'\n        console.log(model);\n        let stream = await navigator.mediaDevices.getUserMedia({ video: {width:512, height:512} })\n\n        textElement.innerHTML = 'capture'\n        let video = document.getElementById('video')\n        video.srcObject = stream;\n        await video.play()\n        let canvas = document.getElementById('result')\n        let ctx = canvas.getContext('2d');\n\n        let update = () => {\n            let result = tf.tidy(() => {\n                    textElement.innerHTML = 'req'\n                try {\n                    let image = tf.browser.fromPixels(video).expandDims().div(255)\n                    //if(image.shape[2]!==1024|| image.shape[1]!==768){\n                        image = tf.image.resizeBilinear(image, [256, 256])\n                    //}\n                    textElement.innerHTML = 'req1'\n                    let result = model.predict(image);\n                    textElement.innerHTML = 'req2'\n                    result =  result.reshape(result.shape.slice(1)).mul(0.5).add(0.5).maximum(0).minimum(1)\n                    return result;\n                } catch (err) {\n\n                    textElement.innerHTML = err.message\n                }\n            })\n            tf.browser.toPixels(result, canvas).then(()=>{\n                        textElement.innerHTML = 'req3'\n                        result.dispose();\n                        requestAnimationFrame(update)\n                    }).catch(err=>{\n                    textElement.innerHTML = err.message\n                    })\n        }\n\n        requestAnimationFrame(update)\n\n    })\n\n</script>\n<div id=\"but\" onclick=\"init().catch(err=>{document.body.innerText= err.message})\">play</div>`\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}