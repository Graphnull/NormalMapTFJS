{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","props","init","a","tf","window","inited","textElement","document","getElementById","innerHTML","loadLayersModel","model","inputs","shape","inputLayers","batchInputShape","inputSpec","feedInputShapes","internalInputShapes","navigator","mediaDevices","getUserMedia","video","facingMode","stream","srcObject","play","canvas","getContext","update","result","tidy","image","browser","fromPixels","expandDims","div","resizeBilinear","predict","reshape","slice","mul","add","maximum","minimum","err","message","toPixels","then","dispose","requestAnimationFrame","catch","console","log","this","className","id","onClick","error","body","innerText","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"kQAAe,I,YC+EAA,E,kDA1Eb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAIRC,KALkB,sBAKX,wCAAAC,EAAA,yDACGC,EAAKC,OAAOD,IACZ,EAAKE,OAFR,wDAKD,EAAKA,QAAS,GACVC,EAAcC,SAASC,eAAe,QAC9BC,UAAY,UAPvB,SAQiBN,EAAGO,gBAAgB,mCARpC,cAQGC,EARH,QASKC,OAAO,GAAGC,MAAQ,CAAC,KAAK,KAAK,KAAK,GACxCF,EAAMG,YAAY,GAAGC,gBAAkB,CAAC,KAAK,KAAK,KAAK,GACvDJ,EAAMG,YAAY,GAAGE,UAAU,GAAGH,MAAQ,CAAC,KAAK,KAAK,KAAK,GAC1DF,EAAMM,gBAAgB,GAAK,CAAC,KAAK,KAAK,KAAK,GAC3CN,EAAMO,oBAAoB,GAAK,CAAC,KAAK,KAAK,KAAK,GAE/CZ,EAAYG,UAAY,SAfvB,UAgBkBU,UAAUC,aAAaC,aAAa,CAAEC,OAAO,EAAKC,WAAY,gBAhBhF,eAgBGC,EAhBH,OAkBDlB,EAAYG,UAAY,WACpBa,EAAQf,SAASC,eAAe,UAC9BiB,UAAYD,EApBjB,UAqBKF,EAAMI,OArBX,QAsBGC,EAASpB,SAASC,eAAe,UAC3BmB,EAAOC,WAAW,MAExBC,EAAS,SAATA,IACA,IAAIC,EAAS3B,EAAG4B,MAAK,WACbzB,EAAYG,UAAY,MAC5B,IACI,IAAIuB,EAAQ7B,EAAG8B,QAAQC,WAAWZ,GAAOa,aAAaC,IAAI,KAEtDJ,EAAQ7B,EAAG6B,MAAMK,eAAeL,EAAO,CAAC,IAAK,MAEjD1B,EAAYG,UAAY,OACxB,IAAIqB,EAASnB,EAAM2B,QAAQN,GAG3B,OAFA1B,EAAYG,UAAY,OACxBqB,EAAUA,EAAOS,QAAQT,EAAOjB,MAAM2B,MAAM,IAAIC,IAAI,IAAKC,IAAI,IAAKC,QAAQ,GAAGC,QAAQ,GAEvF,MAAOC,GAELvC,EAAYG,UAAYoC,EAAIC,YAGpC3C,EAAG8B,QAAQc,SAASjB,EAAQH,GAAQqB,MAAK,WAC7B1C,EAAYG,UAAY,OACxBqB,EAAOmB,UACPC,sBAAsBrB,MACvBsB,OAAM,SAAAN,GACTvC,EAAYG,UAAYoC,EAAIC,YAIxCI,sBAAsBrB,GApDrB,4CAHL,EAAKxB,QAAS,EAFE,E,0CA4DlB,WAAS,IAAD,OAEN,OADA+C,QAAQC,IAAIC,MAEV,sBAAKC,UAAU,MAAf,UACE,uBAAOC,GAAG,UACV,wBAAQA,GAAG,WACX,qBAAKA,GAAG,MAAMC,QAAS,WACrB,EAAKxD,OAAOkD,OAAM,SAAAN,GAAMO,QAAQM,MAAMb,GAAKtC,SAASoD,KAAKC,UAAWf,EAAIC,YAD1E,6B,GAnEUe,IAAMC,WCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlE,SAASC,eAAe,SAO1BuD,M","file":"static/js/main.e5f590ce.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.inited = false;\n\n  }\n  init = async () => {\n        let tf = window.tf;\n        if (this.inited) {\n            return;\n        }\n        this.inited = true;\n        let textElement = document.getElementById('but')\n        textElement.innerHTML = 'started'\n        let model = await tf.loadLayersModel('/NormalMapTFJS/model/model.json');\n        model.inputs[0].shape = [null,null,null,3]\n        model.inputLayers[0].batchInputShape = [null,null,null,3]\n        model.inputLayers[0].inputSpec[0].shape = [null,null,null,3]\n        model.feedInputShapes[0] = [null,null,null,3]\n        model.internalInputShapes[0] = [null,null,null,3]\n\n        textElement.innerHTML = 'loaded'\n        let stream = await navigator.mediaDevices.getUserMedia({ video: true,facingMode: \"environment\" })\n\n        textElement.innerHTML = 'capture'\n        let video = document.getElementById('video')\n        video.srcObject = stream;\n        await video.play()\n        let canvas = document.getElementById('result')\n        let ctx = canvas.getContext('2d');\n\n        let update = () => {\n            let result = tf.tidy(() => {\n                    textElement.innerHTML = 'req'\n                try {\n                    let image = tf.browser.fromPixels(video).expandDims().div(255)\n                    //if(image.shape[2]!==1024|| image.shape[1]!==768){\n                        image = tf.image.resizeBilinear(image, [512, 512])\n                    //}\n                    textElement.innerHTML = 'req1'\n                    let result = model.predict(image);\n                    textElement.innerHTML = 'req2'\n                    result =  result.reshape(result.shape.slice(1)).mul(0.5).add(0.5).maximum(0).minimum(1)\n                    return result;\n                } catch (err) {\n\n                    textElement.innerHTML = err.message\n                }\n            })\n            tf.browser.toPixels(result, canvas).then(()=>{\n                        textElement.innerHTML = 'req3'\n                        result.dispose();\n                        requestAnimationFrame(update)\n                    }).catch(err=>{\n                    textElement.innerHTML = err.message\n                    })\n        }\n\n        requestAnimationFrame(update)\n\n    }\n  render(){\n    console.log(this);\n    return (\n      <div className=\"App\">\n        <video id='video'></video>\n        <canvas id='result'></canvas>\n        <div id=\"but\" onClick={()=>{\n          this.init().catch(err=>{console.error(err);document.body.innerText= err.message})\n        }}>Play(v2)</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}