{"version":3,"sources":["logo.svg","AppClass.js","reportWebVitals.js","index.js"],"names":["App","props","init","a","tf","window","inited","textElement","document","getElementById","innerHTML","loadGraphModel","model","console","log","navigator","mediaDevices","getUserMedia","video","aspectRatio","ideal","facingMode","stream","srcObject","play","canvas","getContext","update","result","tidy","image","browser","fromPixels","expandDims","div","resizeBilinear","predict","reshape","shape","slice","mul","add","maximum","minimum","err","message","toPixels","then","dispose","requestAnimationFrame","catch","initClass","DeviceMotionEvent","requestPermission","orient","addEventListener","event","beta","time","Date","img","tensor","Float32Array","map","v","out1","dataSync","viz","y","x","maxv","Infinity","maxi","i","dx","dy","initImg","Promise","res","Image","onload","src","this","className","id","onClick","error","body","innerText","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ac62fc70.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\nimport logo from './logo.svg';\nimport './App.css';\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inited = false;\n\n  }\n  init = async () => {\n    let tf = window.tf;\n    if (this.inited) {\n      return;\n    }\n    this.inited = true;\n    let textElement = document.getElementById('but')\n    textElement.innerHTML = 'started'\n    let model = await tf.loadGraphModel('/NormalMapTFJS/model/model.json');\n    console.log(model);\n    // model.inputs[0].shape = [null, null, null, 3]\n    // model.inputLayers[0].batchInputShape = [null, null, null, 3]\n    // model.inputLayers[0].inputSpec[0].shape = [null, null, null, 3]\n    // model.feedInputShapes[0] = [null, null, null, 3]\n    // model.internalInputShapes[0] = [null, null, null, 3]\n\n    // model.inputs[0].shape = [null, null, null, 3]\n    // model.inputLayers[0].batchInputShape = [null, null, null, 3]\n    // model.inputLayers[0].inputSpec[0].shape = [null, null, null, 3]\n    // model.feedInputShapes[0] = [null, null, null, 3]\n    // model.internalInputShapes[0] = [null, null, null, 3]\n\n\n    textElement.innerHTML = 'loaded'\n    let stream = await navigator.mediaDevices.getUserMedia({ video: { aspectRatio: { ideal: 1 }, facingMode: \"environment\" } })\n\n    textElement.innerHTML = 'capture'\n    let video = document.getElementById('video')\n    video.srcObject = stream;\n    await video.play()\n    let canvas = document.getElementById('result')\n    let ctx = canvas.getContext('2d');\n\n    let update = () => {\n      let result = tf.tidy(() => {\n        textElement.innerHTML = 'req'\n        try {\n          let image = tf.browser.fromPixels(video).expandDims().div(255)\n          //if(image.shape[2]!==1024|| image.shape[1]!==768){\n          image = tf.image.resizeBilinear(image, [512, 512])\n          //}\n          textElement.innerHTML = 'req1'\n          let result = model.predict(image);\n          textElement.innerHTML = 'req2'\n          result = result.reshape(result.shape.slice(1)).mul(0.5).add(0.5).maximum(0).minimum(1)\n          return result;\n        } catch (err) {\n\n          textElement.innerHTML = err.message\n        }\n      })\n      tf.browser.toPixels(result, canvas).then(() => {\n        textElement.innerHTML = 'req3'\n        result.dispose();\n        requestAnimationFrame(update)\n      }).catch(err => {\n        textElement.innerHTML = err.message\n      })\n    }\n\n    requestAnimationFrame(update)\n\n  }\n  initClass = async () => {\n    let tf = window.tf;\n    if (this.inited) {\n      return;\n    }\n    this.inited = true;\n    let textElement = document.getElementById('but')\n    textElement.innerHTML = 'started'\n    let model = await tf.loadGraphModel('/NormalMapTFJS/modelClassOrient/model.json');\n    console.log(model);\n    // model.inputs[0].shape = [null, null, null, 3]\n    // model.inputLayers[0].batchInputShape = [null, null, null, 3]\n    // model.inputLayers[0].inputSpec[0].shape = [null, null, null, 3]\n    // model.feedInputShapes[0] = [null, null, null, 3]\n    // model.internalInputShapes[0] = [null, null, null, 3]\n\n    // model.inputs[0].shape = [null, null, null, 3]\n    // model.inputLayers[0].batchInputShape = [null, null, null, 3]\n    // model.inputLayers[0].inputSpec[0].shape = [null, null, null, 3]\n    // model.feedInputShapes[0] = [null, null, null, 3]\n    // model.internalInputShapes[0] = [null, null, null, 3]\n\n    if (\n      DeviceMotionEvent &&\n      typeof DeviceMotionEvent.requestPermission === \"function\"\n    ) {\n      DeviceMotionEvent.requestPermission();\n    }\n\n    let orient = 0\n    window.addEventListener(\"deviceorientation\", (event) => {\n      orient = (event.beta - 90) / 180\n      textElement.innerHTML = '' + event.beta\n    });\n\n    textElement.innerHTML = 'loaded'\n    let stream = await navigator.mediaDevices.getUserMedia({ video: { aspectRatio: { ideal: 1 }, facingMode: \"environment\" } })\n\n    textElement.innerHTML = 'capture'\n    let video = document.getElementById('video')\n    video.srcObject = stream;\n    await video.play()\n    let canvas = document.getElementById('result')\n    let ctx = canvas.getContext('2d');\n\n    let update = () => {\n      let result = tf.tidy(() => {\n        textElement.innerHTML = 'req'\n        try {\n          let image = tf.browser.fromPixels(video).expandDims().div(255)\n\n          //if(image.shape[2]!==1024|| image.shape[1]!==768){\n          //image = tf.image.resizeBilinear(image, [512, 512])\n          //}\n          textElement.innerHTML = 'req1'\n          let time = new Date()\n          let result = model.predict({ img: image, orient: tf.tensor(new Float32Array(6 * 8).map(v => orient), [1, 6, 8, 1]) });\n          textElement.innerHTML = 'req2'\n          result = result.reshape(result.shape.slice(1)).slice([0, 0, 0], [96, 128, 36])\n          let out1 = result.dataSync()\n          console.log('t', new Date() - time);\n          let viz = new Float32Array(96 * 128 * 3)\n\n          for (let y = 0; y !== 96; y++) {\n            for (let x = 0; x !== 128; x++) {\n              let maxv = -Infinity\n              let maxi = 0\n              for (let i = 0; i !== 18; i++) {\n                if (maxv < out1[y * 128 * 36 + x * 36 + i]) {\n                  maxv = out1[y * 128 * 36 + x * 36 + i]\n                  maxi = i\n                }\n              }\n              let dx = maxi * 15\n              maxv = -Infinity\n              maxi = 0\n              for (let i = 0; i !== 18; i++) {\n                if (maxv < out1[y * 128 * 36 + x * 36 + i + 18]) {\n                  maxv = out1[y * 128 * 36 + x * 36 + i + 18]\n                  maxi = i\n                }\n              }\n              let dy = maxi * 15\n\n              viz[y * 128 * 3 + x * 3 + 0] = dx\n              viz[y * 128 * 3 + x * 3 + 1] = dy\n              viz[y * 128 * 3 + x * 3 + 2] = 0\n            }\n          }\n          let rest = tf.tensor(viz, [96, 128, 3], 'int32')\n\n          return rest;\n        } catch (err) {\n          console.log('err: ', err);\n\n          textElement.innerHTML = err.message\n        }\n      })\n      console.log(result, canvas);\n      tf.browser.toPixels(result, canvas).then(() => {\n        textElement.innerHTML = 'req3'\n        result.dispose();\n        requestAnimationFrame(update)\n      }).catch(err => {\n        textElement.innerHTML = err.message\n      })\n    }\n\n    requestAnimationFrame(update)\n\n  }\n  initImg = async () => {\n    let tf = window.tf;\n    if (this.inited) {\n      return;\n    }\n    this.inited = true;\n    let textElement = document.getElementById('but')\n    textElement.innerHTML = 'started'\n    let model = await tf.loadGraphModel('/NormalMapTFJS/modelClassOrient/model.json');\n    console.log(model);\n    // model.inputs[0].shape = [null, null, null, 3]\n    // model.inputLayers[0].batchInputShape = [null, null, null, 3]\n    // model.inputLayers[0].inputSpec[0].shape = [null, null, null, 3]\n    // model.feedInputShapes[0] = [null, null, null, 3]\n    // model.internalInputShapes[0] = [null, null, null, 3]\n\n    // model.inputs[0].shape = [null, null, null, 3]\n    // model.inputLayers[0].batchInputShape = [null, null, null, 3]\n    // model.inputLayers[0].inputSpec[0].shape = [null, null, null, 3]\n    // model.feedInputShapes[0] = [null, null, null, 3]\n    // model.internalInputShapes[0] = [null, null, null, 3]\n\n\n    textElement.innerHTML = 'loaded'\n    let img = await new Promise((res) => { let img = new Image(); img.onload = () => res(img); img.src = '/NormalMapTFJS/test.png' })\n\n\n    textElement.innerHTML = 'capture'\n\n    let canvas = document.getElementById('result')\n    let ctx = canvas.getContext('2d');\n\n    let update = () => {\n      let result = tf.tidy(() => {\n        textElement.innerHTML = 'req'\n        try {\n          let image = tf.browser.fromPixels(img).expandDims().div(255)\n\n          //if(image.shape[2]!==1024|| image.shape[1]!==768){\n          //image = tf.image.resizeBilinear(image, [512, 512])\n          //}\n          textElement.innerHTML = 'req1'\n          let time = new Date()\n          let result = model.predict({ img: image, orient: tf.tensor(new Float32Array(6 * 8).map(v => 0.08), [1, 6, 8, 1]) });\n          textElement.innerHTML = 'req2'\n          result = result.reshape(result.shape.slice(1)).slice([0, 0, 0], [96, 128, 36])\n          let out1 = result.dataSync()\n          console.log('t', new Date() - time);\n          let viz = new Float32Array(96 * 128 * 3)\n\n          for (let y = 0; y !== 96; y++) {\n            for (let x = 0; x !== 128; x++) {\n              let maxv = -Infinity\n              let maxi = 0\n              for (let i = 0; i !== 18; i++) {\n                if (maxv < out1[y * 128 * 36 + x * 36 + i]) {\n                  maxv = out1[y * 128 * 36 + x * 36 + i]\n                  maxi = i\n                }\n              }\n              let dx = maxi * 15\n              maxv = -Infinity\n              maxi = 0\n              for (let i = 0; i !== 18; i++) {\n                if (maxv < out1[y * 128 * 36 + x * 36 + i + 18]) {\n                  maxv = out1[y * 128 * 36 + x * 36 + i + 18]\n                  maxi = i\n                }\n              }\n              let dy = maxi * 15\n\n              viz[y * 128 * 3 + x * 3 + 0] = dx\n              viz[y * 128 * 3 + x * 3 + 1] = dy\n              viz[y * 128 * 3 + x * 3 + 2] = 0\n            }\n          }\n          let rest = tf.tensor(viz, [96, 128, 3], 'int32')\n\n          return rest;\n        } catch (err) {\n          console.log('err: ', err);\n\n          textElement.innerHTML = err.message\n        }\n      })\n      console.log(result, canvas);\n      tf.browser.toPixels(result, canvas).then(() => {\n        textElement.innerHTML = 'req3'\n        result.dispose();\n        requestAnimationFrame(update)\n      }).catch(err => {\n        textElement.innerHTML = err.message\n      })\n    }\n\n    requestAnimationFrame(update)\n\n  }\n  render() {\n    console.log(this);\n    return (\n      <div className=\"App\">\n        <video id='video'></video>\n        <canvas id='result'></canvas>\n        <div id=\"but\" onClick={() => {\n          this.init().catch(err => { console.error(err); document.body.innerText = err.message })\n        }}>Play(v3)</div>\n\n        <div id=\"but2\" onClick={() => {\n          this.initImg().catch(err => { console.error(err); document.body.innerText = err.message })\n        }}>imgClass</div>\n\n        <div id=\"but\" onClick={() => {\n          this.initClass().catch(err => { console.error(err); document.body.innerText = err.message })\n        }}>PlayClass</div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './AppClass';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}