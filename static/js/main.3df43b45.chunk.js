(this.webpackJsonpnormalmaptfjs=this.webpackJsonpnormalmaptfjs||[]).push([[0],{11:function(e,n,t){"use strict";t.r(n);t(1),t(4),t(8),t.p,t(9),t(0);var l=function(e){e&&e instanceof Function&&t.e(3).then(t.bind(null,12)).then((function(n){var t=n.getCLS,l=n.getFID,i=n.getFCP,a=n.getLCP,r=n.getTTFB;t(e),l(e),i(e),a(e),r(e)}))};document.getElementById("root").innerHTML="<video id='video'></video>\n<canvas id='result'></canvas>\n<script>\n    let inited = false\n    let init = (async () => {\n\n        if (inited) {\n            return;\n        }\n        inited = true;\n        let textElement = document.getElementById('but')\n        textElement.innerHTML = 'started'\n        console.log(tf)\n        //await tf.setBackend('cpu')\n        let model = await tf.loadLayersModel('/model/model.json');\n        model.inputs[0].shape = [null,null,null,3]\n        model.inputLayers[0].batchInputShape = [null,null,null,3]\n        model.inputLayers[0].inputSpec[0].shape = [null,null,null,3]\n        model.feedInputShapes[0] = [null,null,null,3]\n        model.internalInputShapes[0] = [null,null,null,3]\n        console.log('model: ', model);\n        textElement.innerHTML = 'loaded'\n        console.log(model);\n        let stream = await navigator.mediaDevices.getUserMedia({ video: {width:512, height:512} })\n\n        textElement.innerHTML = 'capture'\n        let video = document.getElementById('video')\n        video.srcObject = stream;\n        await video.play()\n        let canvas = document.getElementById('result')\n        let ctx = canvas.getContext('2d');\n\n        let update = () => {\n            let result = tf.tidy(() => {\n                    textElement.innerHTML = 'req'\n                try {\n                    let image = tf.browser.fromPixels(video).expandDims().div(255)\n                    //if(image.shape[2]!==1024|| image.shape[1]!==768){\n                        image = tf.image.resizeBilinear(image, [256, 256])\n                    //}\n                    textElement.innerHTML = 'req1'\n                    let result = model.predict(image);\n                    textElement.innerHTML = 'req2'\n                    result =  result.reshape(result.shape.slice(1)).mul(0.5).add(0.5).maximum(0).minimum(1)\n                    return result;\n                } catch (err) {\n\n                    textElement.innerHTML = err.message\n                }\n            })\n            tf.browser.toPixels(result, canvas).then(()=>{\n                        textElement.innerHTML = 'req3'\n                        result.dispose();\n                        requestAnimationFrame(update)\n                    }).catch(err=>{\n                    textElement.innerHTML = err.message\n                    })\n        }\n\n        requestAnimationFrame(update)\n\n    })\n\n<\/script>\n<div id=\"but\" onclick=\"init().catch(err=>{document.body.innerText= err.message})\">play</div>",l()},8:function(e,n,t){},9:function(e,n,t){}},[[11,1,2]]]);
//# sourceMappingURL=main.3df43b45.chunk.js.map